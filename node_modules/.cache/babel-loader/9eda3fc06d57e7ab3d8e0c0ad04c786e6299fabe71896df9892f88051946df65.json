{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jorla\\\\Documents\\\\d2rotations\\\\my-app\\\\src\\\\components\\\\Countdown.tsx\";\nimport React from 'react';\nimport Countdown from 'react-countdown';\nimport './styles/countdown.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction renderWeeklyCountdown() {\n  const now = new Date();\n  //reset time is tuesday (2) at 1pm EST\n  const weekDaysToReset = [2, 1, 0, 6, 5, 4, 3];\n  let resetTime = null;\n  const daylight_savings = false;\n  if (daylight_savings) {\n    //DAYLIGHT SAVINGS\n    if (now.getDay() === 2 && now.getHours() >= 13) {\n      //reset is today at 1pm\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 1);\n    } else {\n      //reset is x days away at 1pm EST\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 13);\n    }\n  } else {\n    //REGULAR\n    if (now.getDay() === 2 && now.getHours() >= 13) {\n      //reset is today at 12pm\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 12);\n    } else {\n      //reset is x days away at 12pm EST\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 12);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Countdown, {\n    date: resetTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 12\n  }, this);\n}\nfunction renderDailyCountdown() {\n  const now = new Date();\n  //reset time is either next day at 1pm or same day at 1 pm\n  let resetTime = null;\n  const daylight_savings = false;\n  if (daylight_savings) {\n    //DAYLIGHT SAVINGS\n    if (now.getHours() >= 13) {\n      //reset is tomorrow at 1pm\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 13);\n    } else {\n      //reset is today at 1pm\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 13);\n    }\n  } else {\n    //REGULAR\n    if (now.getHours() >= 12) {\n      //reset is tomorrow at 12pm\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 12);\n    } else {\n      //reset is today at 12pm\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Countdown, {\n    date: resetTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\nfunction renderCountdown(type) {\n  if (type === \"daily\") renderDailyCountdown();else renderWeeklyCountdown();\n}\nconst CountdownTimer = _ref => {\n  let {\n    type\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"countdown\",\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Time until Reset: \", renderCountdown(type)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_c = CountdownTimer;\nexport default CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["React","Countdown","jsxDEV","_jsxDEV","Fragment","_Fragment","renderWeeklyCountdown","now","Date","weekDaysToReset","resetTime","daylight_savings","getDay","getHours","getFullYear","getMonth","getDate","date","fileName","_jsxFileName","lineNumber","columnNumber","renderDailyCountdown","renderCountdown","type","CountdownTimer","_ref","className","children","_c","$RefreshReg$"],"sources":["C:/Users/jorla/Documents/d2rotations/my-app/src/components/Countdown.tsx"],"sourcesContent":["import React, { FC } from 'react';\r\nimport Countdown from 'react-countdown';\r\nimport './styles/countdown.css';\r\n\r\ntype CountdownProps = {\r\n    type: string;\r\n};\r\n\r\nfunction renderWeeklyCountdown() {\r\n    const now = new Date();\r\n    //reset time is tuesday (2) at 1pm EST\r\n    const weekDaysToReset = [2,1,0,6,5,4,3];\r\n    let resetTime = null;\r\n    const daylight_savings = false;\r\n\r\n    if (daylight_savings) {\r\n        //DAYLIGHT SAVINGS\r\n        if (now.getDay() === 2 && now.getHours() >= 13) {\r\n            //reset is today at 1pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 1);\r\n        } else {\r\n            //reset is x days away at 1pm EST\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 13);\r\n        }\r\n    } else {\r\n        //REGULAR\r\n        if (now.getDay() === 2 && now.getHours() >= 13) {\r\n            //reset is today at 12pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 12);\r\n        } else {\r\n            //reset is x days away at 12pm EST\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 12);\r\n        }\r\n    }\r\n\r\n    return <Countdown date={resetTime} />;\r\n}\r\n\r\nfunction renderDailyCountdown() {\r\n    const now = new Date();\r\n    //reset time is either next day at 1pm or same day at 1 pm\r\n    let resetTime = null;\r\n    const daylight_savings = false;\r\n\r\n    if (daylight_savings) {\r\n        //DAYLIGHT SAVINGS\r\n        if (now.getHours() >= 13) {\r\n            //reset is tomorrow at 1pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 13);\r\n        } else {\r\n            //reset is today at 1pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 13);\r\n        }\r\n    } else {\r\n        //REGULAR\r\n        if (now.getHours() >= 12) {\r\n            //reset is tomorrow at 12pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 12);\r\n        } else {\r\n            //reset is today at 12pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Countdown date={resetTime} />\r\n    );\r\n}\r\n\r\nfunction renderCountdown(type: string) {\r\n    if(type === \"daily\") renderDailyCountdown()\r\n    else renderWeeklyCountdown()\r\n}\r\n\r\nconst CountdownTimer: FC<CountdownProps> = ({type}) => {\r\n    return (\r\n        <div className='countdown'>\r\n            <>\r\n                Time until Reset: {renderCountdown(type)}\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CountdownTimer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}