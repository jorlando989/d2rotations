{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jorla\\\\Documents\\\\d2rotations\\\\my-app\\\\src\\\\components\\\\Countdown.tsx\";\nimport React from 'react';\n// import './styles/countdown.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction renderCountdown() {\n  const now = new Date();\n  //reset time is tuesday (2) at 1pm EST\n  const weekDaysToReset = [2, 1, 0, 6, 5, 4, 3];\n  let resetTime = null;\n  const daylight_savings = false;\n  if (daylight_savings) {\n    //DAYLIGHT SAVINGS\n    if (now.getDay() === 2 && now.getHours() >= 13) {\n      //reset is today at 1pm\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 1);\n    } else {\n      //reset is x days away at 1pm EST\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 13);\n    }\n  } else {\n    //REGULAR\n    if (now.getDay() === 2 && now.getHours() >= 13) {\n      //reset is today at 12pm\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 12);\n    } else {\n      //reset is x days away at 12pm EST\n      resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 12);\n    }\n  }\n  return resetTime;\n}\nconst Countdown = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"countdown\",\n    children: /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"align-right\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Time until Reset: \", renderCountdown()]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_c = Countdown;\nexport default Countdown;\nvar _c;\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","renderCountdown","now","Date","weekDaysToReset","resetTime","daylight_savings","getDay","getHours","getFullYear","getMonth","getDate","Countdown","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jorla/Documents/d2rotations/my-app/src/components/Countdown.tsx"],"sourcesContent":["import React, { FC } from 'react';\r\n// import './styles/countdown.css';\r\n\r\nfunction renderCountdown() {\r\n    const now = new Date();\r\n    //reset time is tuesday (2) at 1pm EST\r\n    const weekDaysToReset = [2,1,0,6,5,4,3];\r\n    let resetTime = null;\r\n    const daylight_savings = false;\r\n\r\n    if (daylight_savings) {\r\n        //DAYLIGHT SAVINGS\r\n        if (now.getDay() === 2 && now.getHours() >= 13) {\r\n            //reset is today at 1pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 1);\r\n        } else {\r\n            //reset is x days away at 1pm EST\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 13);\r\n        }\r\n    } else {\r\n        //REGULAR\r\n        if (now.getDay() === 2 && now.getHours() >= 13) {\r\n            //reset is today at 12pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 12);\r\n        } else {\r\n            //reset is x days away at 12pm EST\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 12);\r\n        }\r\n    }\r\n\r\n    return resetTime;\r\n}\r\n\r\nconst Countdown: FC = () => {\r\n    \r\n    return (\r\n        <div className='countdown'>\r\n            <h5 className='align-right'>\r\n                <>\r\n                    Time until Reset: {renderCountdown()}\r\n                </>\r\n            </h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Countdown;"],"mappings":";AAAA,OAAOA,KAAK,MAAc,OAAO;AACjC;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,eAAeA,CAAA,EAAG;EACvB,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;EACtB;EACA,MAAMC,eAAe,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EACvC,IAAIC,SAAS,GAAG,IAAI;EACpB,MAAMC,gBAAgB,GAAG,KAAK;EAE9B,IAAIA,gBAAgB,EAAE;IAClB;IACA,IAAIJ,GAAG,CAACK,MAAM,EAAE,KAAK,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAE,IAAI,EAAE,EAAE;MAC5C;MACAH,SAAS,GAAG,IAAIF,IAAI,CAACD,GAAG,CAACO,WAAW,EAAE,EAAEP,GAAG,CAACQ,QAAQ,EAAE,EAAER,GAAG,CAACS,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;IACjF,CAAC,MAAM;MACH;MACAN,SAAS,GAAG,IAAIF,IAAI,CAACD,GAAG,CAACO,WAAW,EAAE,EAAEP,GAAG,CAACQ,QAAQ,EAAE,EAAER,GAAG,CAACS,OAAO,EAAE,GAAGP,eAAe,CAACF,GAAG,CAACK,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;IAC9G;EACJ,CAAC,MAAM;IACH;IACA,IAAIL,GAAG,CAACK,MAAM,EAAE,KAAK,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAE,IAAI,EAAE,EAAE;MAC5C;MACAH,SAAS,GAAG,IAAIF,IAAI,CAACD,GAAG,CAACO,WAAW,EAAE,EAAEP,GAAG,CAACQ,QAAQ,EAAE,EAAER,GAAG,CAACS,OAAO,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;IAClF,CAAC,MAAM;MACH;MACAN,SAAS,GAAG,IAAIF,IAAI,CAACD,GAAG,CAACO,WAAW,EAAE,EAAEP,GAAG,CAACQ,QAAQ,EAAE,EAAER,GAAG,CAACS,OAAO,EAAE,GAAGP,eAAe,CAACF,GAAG,CAACK,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;IAC9G;EACJ;EAEA,OAAOF,SAAS;AACpB;AAEA,MAAMO,SAAa,GAAGA,CAAA,KAAM;EAExB,oBACIZ,OAAA;IAAKa,SAAS,EAAC,WAAW;IAAAC,QAAA,eACtBd,OAAA;MAAIa,SAAS,EAAC,aAAa;MAAAC,QAAA,eACvBd,OAAA,CAAAF,SAAA;QAAAgB,QAAA,GAAE,oBACoB,EAACb,eAAe,EAAE;MAAA;IACrC;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEd,CAAC;AAACC,EAAA,GAXIP,SAAa;AAanB,eAAeA,SAAS;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}