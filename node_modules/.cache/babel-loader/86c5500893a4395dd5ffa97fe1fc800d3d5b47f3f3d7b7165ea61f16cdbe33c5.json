{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jorla\\\\Documents\\\\d2rotations\\\\my-app\\\\src\\\\components\\\\LostSectorRotation.tsx\";\nimport React from \"react\";\n// import './styles/dashboard.css';\n\nimport { getActivityDef, getActivityModifierDef, getInventoryItemDef } from \"@d2api/manifest-web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LostSectorRotation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse: {\n        currLostSectorName: \"\",\n        currLostSectorHashes: {\n          master: -1,\n          legend: -1\n        },\n        currReward: \"\"\n      }\n    };\n  }\n  getLostSectors() {\n    fetch(\"http://localhost:5000/api/lost_sector\").then(res => res.json()).then(res => this.setState({\n      apiResponse: res\n    }));\n  }\n  componentDidMount() {\n    this.getLostSectors();\n  }\n  getRewards() {\n    const masterInfo = getActivityDef(this.state.apiResponse.currLostSectorHashes.master);\n    const legendInfo = getActivityDef(this.state.apiResponse.currLostSectorHashes.legend);\n\n    //get master info\n    let filteredMasterModifiers, masterRewards;\n    if (masterInfo) {\n      const masterModifiers = masterInfo.modifiers.map(_ref => {\n        let {\n          activityModifierHash\n        } = _ref;\n        const modifierInfo = getActivityModifierDef(activityModifierHash);\n        return modifierInfo;\n      });\n      //filter hidden modifiers\n      filteredMasterModifiers = masterModifiers.filter(mod => {\n        if (mod == undefined) return;\n        return mod.displayInNavMode && mod.displayProperties.name !== \"\";\n      });\n\n      //get reward info\n      masterRewards = masterInfo.rewards.map(_ref2 => {\n        let {\n          rewardItems\n        } = _ref2;\n        const rewardInfo = getInventoryItemDef(rewardItems[0].itemHash);\n        return rewardInfo;\n      });\n    } else {\n      console.log(\"master lost sector not found\");\n    }\n\n    //get legend info\n    let legendRewards, filteredLegendModifiers;\n    if (legendInfo) {\n      const legendModifiers = legendInfo.modifiers.map(_ref3 => {\n        let {\n          activityModifierHash\n        } = _ref3;\n        const modifierInfo = getActivityModifierDef(activityModifierHash);\n        return modifierInfo;\n      });\n      if (legendModifiers) {\n        filteredLegendModifiers = legendModifiers.filter(mod => {\n          if (mod == undefined) return;\n          return mod.displayInNavMode && mod.displayProperties.name !== \"\";\n        });\n\n        //get reward info\n        legendRewards = legendInfo.rewards.map(_ref4 => {\n          let {\n            rewardItems\n          } = _ref4;\n          const rewardInfo = getInventoryItemDef(rewardItems[0].itemHash);\n          return rewardInfo;\n        });\n      }\n    } else {\n      console.log(\"legend lost sector not found\");\n    }\n    return {\n      legendRewards,\n      filteredLegendModifiers,\n      masterRewards,\n      filteredMasterModifiers\n    };\n  }\n  renderLostSectors() {\n    const rewards = this.getRewards();\n    const lostSectorName = this.state.apiResponse.currLostSectorName;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: lostSectorName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  }\n  render() {\n    if (this.state !== null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.renderLostSectors()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this);\n    }\n  }\n}\nexport default LostSectorRotation;","map":{"version":3,"names":["React","getActivityDef","getActivityModifierDef","getInventoryItemDef","jsxDEV","_jsxDEV","LostSectorRotation","Component","constructor","props","state","apiResponse","currLostSectorName","currLostSectorHashes","master","legend","currReward","getLostSectors","fetch","then","res","json","setState","componentDidMount","getRewards","masterInfo","legendInfo","filteredMasterModifiers","masterRewards","masterModifiers","modifiers","map","_ref","activityModifierHash","modifierInfo","filter","mod","undefined","displayInNavMode","displayProperties","name","rewards","_ref2","rewardItems","rewardInfo","itemHash","console","log","legendRewards","filteredLegendModifiers","legendModifiers","_ref3","_ref4","renderLostSectors","lostSectorName","children","fileName","_jsxFileName","lineNumber","columnNumber","render"],"sources":["C:/Users/jorla/Documents/d2rotations/my-app/src/components/LostSectorRotation.tsx"],"sourcesContent":["import React, { FC } from \"react\";\r\n// import './styles/dashboard.css';\r\nimport { lostSectorType } from \"../typeDefinitions/lostSectors\";\r\nimport { getActivityDef, getActivityModifierDef, getInventoryItemDef } from \"@d2api/manifest-web\";\r\n\r\ntype MyProps = {};\r\n\r\ntype MyState = {\r\n\tapiResponse: lostSectorType;\r\n};\r\n\r\nclass LostSectorRotation extends React.Component<MyProps, MyState> {\r\n\tconstructor(props: MyProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { apiResponse: {\r\n            currLostSectorName: \"\",\r\n            currLostSectorHashes: {master: -1, legend: -1},\r\n            currReward: \"\"} \r\n        };\r\n\t}\r\n\r\n\tgetLostSectors() {\r\n\t\tfetch(\"http://localhost:5000/api/lost_sector\")\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => this.setState({ apiResponse: res }));\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getLostSectors();\r\n\t}\r\n\r\n    getRewards() {\r\n        const masterInfo = getActivityDef(this.state.apiResponse.currLostSectorHashes.master);\r\n        const legendInfo = getActivityDef(this.state.apiResponse.currLostSectorHashes.legend);\r\n\r\n        //get master info\r\n        let filteredMasterModifiers, masterRewards;\r\n        if (masterInfo) {\r\n            const masterModifiers = masterInfo.modifiers.map(({activityModifierHash}) => {\r\n                const modifierInfo = getActivityModifierDef(activityModifierHash);\r\n                return modifierInfo;\r\n            });\r\n             //filter hidden modifiers\r\n            filteredMasterModifiers = masterModifiers.filter(mod => {\r\n                if (mod == undefined) return;\r\n                return (mod.displayInNavMode && mod.displayProperties.name !== \"\");\r\n            });\r\n\r\n            //get reward info\r\n            masterRewards = masterInfo.rewards.map(({rewardItems}) => {\r\n                const rewardInfo = getInventoryItemDef(rewardItems[0].itemHash);\r\n                return rewardInfo;\r\n            });\r\n        } else {\r\n            console.log(\"master lost sector not found\");\r\n        }\r\n\r\n        //get legend info\r\n        let legendRewards, filteredLegendModifiers;\r\n        if (legendInfo) {\r\n            const legendModifiers = legendInfo.modifiers.map(({activityModifierHash}) => {\r\n                const modifierInfo = getActivityModifierDef(activityModifierHash);\r\n                return modifierInfo;\r\n            });\r\n\r\n            if (legendModifiers) {\r\n                filteredLegendModifiers = legendModifiers.filter(mod => {\r\n                    if (mod == undefined) return;\r\n                    return (mod.displayInNavMode && mod.displayProperties.name !== \"\");\r\n                });\r\n                \r\n                //get reward info\r\n                legendRewards = legendInfo.rewards.map(({rewardItems}) => {\r\n                    const rewardInfo = getInventoryItemDef(rewardItems[0].itemHash);\r\n                    return rewardInfo;\r\n                });\r\n            }\r\n        } else {\r\n            console.log(\"legend lost sector not found\");\r\n        }\r\n        return {\r\n            legendRewards,\r\n            filteredLegendModifiers,\r\n            masterRewards,\r\n            filteredMasterModifiers\r\n        }\r\n    }\r\n\r\n    renderLostSectors() {\r\n        const rewards = this.getRewards();\r\n        const lostSectorName = this.state.apiResponse.currLostSectorName;\r\n        return (\r\n            <div>\r\n                {lostSectorName}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\trender() {\r\n\t\tif (this.state !== null) {\r\n\t\t\treturn <div>{this.renderLostSectors()}</div>;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default LostSectorRotation;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}