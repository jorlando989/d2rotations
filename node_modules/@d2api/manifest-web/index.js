import { allManifest, compareVersionNumbers, loadedVersion, loadManifestFromApiWithoutCheckingCache, vlog, isVerbose, } from '@d2api/manifest';
export { getDef, getAllDefs, setApiKey, setLanguage, allManifest, includeTables, excludeTables, verbose, defLanguages, } from '@d2api/manifest';
export * from '@d2api/manifest/generated-funcs.js';
import { createStore, get as idbGet, keys as idbKeys, set as idbSet, del as idbDel } from 'idb-keyval';
const manifestStore = createStore('manifestDb', 'manifestStore');
/**
 * check keys in indexeddb, find the highest numbered one
 */
export async function getLatestCachedVersion(lang) {
    var _a;
    const sep = `__${lang}__`;
    const keysInCache = await idbKeys(manifestStore);
    const manifestsByVersion = keysInCache.filter((p) => p.includes(sep)).sort(compareVersionNumbers);
    return ((_a = manifestsByVersion[0]) === null || _a === void 0 ? void 0 : _a.split(sep)[0]) || '';
}
/**
 * loads the newest manifest according to what version the API advertises
 *
 * if the newest version is already cached locally, uses that. otherwise
 * downloads the manifest file from the internet
 */
export async function loadDefs() {
    isVerbose && console.time('manifest loaded');
    await loadManifestFromApiWithoutCheckingCache((params) => idbGet(`${params.version}__${params.language}__${params.tableName}`, manifestStore));
    isVerbose && console.timeEnd('manifest loaded');
    // save the results for next time
    save();
}
/**
 * saves the loaded manifest to indexeddb file
 */
async function save() {
    vlog(`saving manifest to indexeddb`);
    if (!allManifest) {
        console.error(`tried to save manifest but none was loaded in memory?`);
        return;
    }
    for (const componentName in allManifest) {
        await idbSet(`${loadedVersion}__${componentName}`, allManifest[componentName], manifestStore);
    }
    setTimeout(async () => {
        const keysInCache = await idbKeys(manifestStore);
        let delCount = 0;
        for (const key of keysInCache) {
            if (key.startsWith(loadedVersion))
                continue;
            await idbDel(key, manifestStore);
            delCount++;
        }
        delCount && vlog(`pruned ${delCount} old manifest tables`);
    }, 2000);
    return true;
}
