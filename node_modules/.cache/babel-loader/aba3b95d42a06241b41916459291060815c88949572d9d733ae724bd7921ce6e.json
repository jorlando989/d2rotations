{"ast":null,"code":"import React from'react';import Countdown from'react-countdown';import'./styles/countdown.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function renderWeeklyCountdown(){var now=new Date();//reset time is tuesday (2) at 1pm EST\nvar weekDaysToReset=[2,1,0,6,5,4,3];var resetTime=null;var daylight_savings=false;if(daylight_savings){//DAYLIGHT SAVINGS\nif(now.getDay()===2&&now.getHours()>=13){//reset is today at 1pm\nresetTime=new Date(now.getFullYear(),now.getMonth(),now.getDate()+7,1);}else{//reset is x days away at 1pm EST\nresetTime=new Date(now.getFullYear(),now.getMonth(),now.getDate()+weekDaysToReset[now.getDay()],13);}}else{//REGULAR\nif(now.getDay()===2&&now.getHours()>=13){//reset is today at 12pm\nresetTime=new Date(now.getFullYear(),now.getMonth(),now.getDate()+7,12);}else{//reset is x days away at 12pm EST\nresetTime=new Date(now.getFullYear(),now.getMonth(),now.getDate()+weekDaysToReset[now.getDay()],12);}}return/*#__PURE__*/_jsx(Countdown,{date:resetTime});}function renderDailyCountdown(){var now=new Date();//reset time is either next day at 1pm or same day at 1 pm\nvar resetTime=null;var daylight_savings=false;if(daylight_savings){//DAYLIGHT SAVINGS\nif(now.getHours()>=13){//reset is tomorrow at 1pm\nresetTime=new Date(now.getFullYear(),now.getMonth(),now.getDate()+1,13);}else{//reset is today at 1pm\nresetTime=new Date(now.getFullYear(),now.getMonth(),now.getDate(),13);}}else{//REGULAR\nif(now.getHours()>=12){//reset is tomorrow at 12pm\nresetTime=new Date(now.getFullYear(),now.getMonth(),now.getDate()+1,12);}else{//reset is today at 12pm\nresetTime=new Date(now.getFullYear(),now.getMonth(),now.getDate(),12);}}return/*#__PURE__*/_jsx(Countdown,{date:resetTime});}function renderCountdown(type){if(type===\"daily\")return renderDailyCountdown();else return renderWeeklyCountdown();}var CountdownTimer=function CountdownTimer(_ref){var type=_ref.type;return/*#__PURE__*/_jsx(\"div\",{className:\"countdown\",children:/*#__PURE__*/_jsxs(_Fragment,{children:[\"Time until Reset: \",renderCountdown(type)]})});};export default CountdownTimer;","map":{"version":3,"names":["React","Countdown","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","renderWeeklyCountdown","now","Date","weekDaysToReset","resetTime","daylight_savings","getDay","getHours","getFullYear","getMonth","getDate","date","renderDailyCountdown","renderCountdown","type","CountdownTimer","_ref","className","children"],"sources":["C:/Users/jorla/Documents/d2rotations/my-app/src/components/Countdown.tsx"],"sourcesContent":["import React, { FC } from 'react';\r\nimport Countdown from 'react-countdown';\r\nimport './styles/countdown.css';\r\n\r\ntype CountdownProps = {\r\n    type: string;\r\n};\r\n\r\nfunction renderWeeklyCountdown() {\r\n    const now = new Date();\r\n    //reset time is tuesday (2) at 1pm EST\r\n    const weekDaysToReset = [2,1,0,6,5,4,3];\r\n    let resetTime = null;\r\n    const daylight_savings = false;\r\n\r\n    if (daylight_savings) {\r\n        //DAYLIGHT SAVINGS\r\n        if (now.getDay() === 2 && now.getHours() >= 13) {\r\n            //reset is today at 1pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 1);\r\n        } else {\r\n            //reset is x days away at 1pm EST\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 13);\r\n        }\r\n    } else {\r\n        //REGULAR\r\n        if (now.getDay() === 2 && now.getHours() >= 13) {\r\n            //reset is today at 12pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7, 12);\r\n        } else {\r\n            //reset is x days away at 12pm EST\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + weekDaysToReset[now.getDay()], 12);\r\n        }\r\n    }\r\n\r\n    return <Countdown date={resetTime} />;\r\n}\r\n\r\nfunction renderDailyCountdown() {\r\n    const now = new Date();\r\n    //reset time is either next day at 1pm or same day at 1 pm\r\n    let resetTime = null;\r\n    const daylight_savings = false;\r\n\r\n    if (daylight_savings) {\r\n        //DAYLIGHT SAVINGS\r\n        if (now.getHours() >= 13) {\r\n            //reset is tomorrow at 1pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 13);\r\n        } else {\r\n            //reset is today at 1pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 13);\r\n        }\r\n    } else {\r\n        //REGULAR\r\n        if (now.getHours() >= 12) {\r\n            //reset is tomorrow at 12pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 12);\r\n        } else {\r\n            //reset is today at 12pm\r\n            resetTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Countdown date={resetTime} />\r\n    );\r\n}\r\n\r\nfunction renderCountdown(type: string) {\r\n    if(type === \"daily\") return renderDailyCountdown();\r\n    else return renderWeeklyCountdown();\r\n}\r\n\r\nconst CountdownTimer: FC<CountdownProps> = ({type}) => {\r\n    return (\r\n        <div className='countdown'>\r\n            <>\r\n                Time until Reset: {renderCountdown(type)}\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CountdownTimer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}