{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jorla\\\\Documents\\\\d2rotations\\\\my-app\\\\src\\\\components\\\\RaidDungeonCard.tsx\";\nimport { getActivityDef, getActivityModifierDef } from \"@d2api/manifest-web\";\nimport React from \"react\";\nimport \"./styles/component.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RaidDungeonCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResponse: {\n        featuredRaid: {\n          milestoneHash: -1,\n          activityHash: -1,\n          masterActivityHash: -1\n        },\n        raidRotation: []\n      }\n    };\n  }\n  getRaidRotation() {\n    fetch(\"http://localhost:5000/api/raid_rotation\").then(res => res.json()).then(res => this.setState({\n      apiResponse: res\n    }));\n  }\n  getDungeonRotation() {\n    fetch(\"http://localhost:5000/api/dungeon_rotation\").then(res => res.json()).then(res => this.setState({\n      apiResponse: res\n    }));\n  }\n  componentDidMount() {\n    if (this.props.type == \"raid\") this.getRaidRotation();else if (this.props.type == \"dungeon\") this.getDungeonRotation();\n  }\n  getRaidInfo() {\n    const featuredRaid = this.state.apiResponse.featuredRaid;\n    const raidInfo = getActivityDef(featuredRaid.activityHash);\n    if (raidInfo == undefined) return;\n    let masterInfo = null;\n    let masterModifiers = null;\n    if (featuredRaid.masterActivityHash) {\n      masterInfo = getActivityDef(featuredRaid.masterActivityHash);\n      if (masterInfo == undefined) return;\n      masterModifiers = masterInfo.modifiers.map(modifier => {\n        const modInfo = getActivityModifierDef(modifier.activityModifierHash);\n        return modInfo;\n      }).filter(mod => {\n        return mod !== undefined && mod.displayProperties.name !== \"\";\n      });\n    }\n    const rotation = this.state.apiResponse.raidRotation.map(raid => {\n      const raidData = getActivityDef(featuredRaid.activityHash);\n      return raidData;\n    });\n    const challenges = raidInfo.modifiers.map(modifier => {\n      const modifierInfo = getActivityModifierDef(modifier.activityModifierHash);\n      return modifierInfo;\n    }).filter(mod => {\n      return mod !== undefined && mod.displayProperties.name !== \"Contest Mode\" && mod.displayProperties.name !== \"\";\n    });\n    return {\n      rotatorInfo: raidInfo,\n      masterInfo,\n      rotation,\n      challenges,\n      masterModifiers\n    };\n  }\n  render() {\n    if (this.state !== null && this.state.apiResponse.featuredRaid.activityHash !== -1) {\n      const raidInfo = this.getRaidInfo();\n      if (raidInfo == undefined) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"error loading raid rotation \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 12\n      }, this);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: raidInfo.rotatorInfo.displayProperties.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this);\n    }\n  }\n}\nexport default RaidDungeonCard;","map":{"version":3,"names":["getActivityDef","getActivityModifierDef","React","jsxDEV","_jsxDEV","RaidDungeonCard","Component","constructor","props","state","apiResponse","featuredRaid","milestoneHash","activityHash","masterActivityHash","raidRotation","getRaidRotation","fetch","then","res","json","setState","getDungeonRotation","componentDidMount","type","getRaidInfo","raidInfo","undefined","masterInfo","masterModifiers","modifiers","map","modifier","modInfo","activityModifierHash","filter","mod","displayProperties","name","rotation","raid","raidData","challenges","modifierInfo","rotatorInfo","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/jorla/Documents/d2rotations/my-app/src/components/RaidDungeonCard.tsx"],"sourcesContent":["import { getActivityDef, getActivityModifierDef } from \"@d2api/manifest-web\";\r\nimport React from \"react\";\r\nimport \"./styles/component.css\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\ntype featuredRaidType = {\r\n\tmilestoneHash: number;\r\n\tactivityHash: number;\r\n\tmasterActivityHash: number;\r\n};\r\n\r\ntype empireHuntResponse = {\r\n\tfeaturedRaid: featuredRaidType;\r\n\traidRotation: string[];\r\n};\r\n\r\ntype MyProps = {\r\n\ttype: string;\r\n};\r\n\r\ntype MyState = {\r\n\tapiResponse: empireHuntResponse;\r\n};\r\n\r\nclass RaidDungeonCard extends React.Component<MyProps, MyState> {\r\n\tconstructor(props: MyProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tapiResponse: {\r\n\t\t\t\tfeaturedRaid: {\r\n\t\t\t\t\tmilestoneHash: -1,\r\n\t\t\t\t\tactivityHash: -1,\r\n\t\t\t\t\tmasterActivityHash: -1,\r\n\t\t\t\t},\r\n\t\t\t\traidRotation: [],\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\tgetRaidRotation() {\r\n\t\tfetch(\"http://localhost:5000/api/raid_rotation\")\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => this.setState({ apiResponse: res }));\r\n\t}\r\n\r\n\tgetDungeonRotation() {\r\n\t\tfetch(\"http://localhost:5000/api/dungeon_rotation\")\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => this.setState({ apiResponse: res }));\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (this.props.type == \"raid\") this.getRaidRotation();\r\n        else if (this.props.type == \"dungeon\") this.getDungeonRotation();\r\n\t}\r\n\r\n\tgetRaidInfo() {\r\n        const featuredRaid = this.state.apiResponse.featuredRaid;\r\n\t\tconst raidInfo = getActivityDef(featuredRaid.activityHash);\r\n        if (raidInfo == undefined) return;\r\n\r\n\t\tlet masterInfo = null;\r\n\t\tlet masterModifiers = null;\r\n\t\tif (featuredRaid.masterActivityHash) {\r\n\t\t\tmasterInfo = getActivityDef(featuredRaid.masterActivityHash);\r\n            if (masterInfo == undefined) return;\r\n\t\t\tmasterModifiers = masterInfo.modifiers\r\n\t\t\t\t.map(modifier => {\r\n\t\t\t\t\tconst modInfo = getActivityModifierDef(\r\n\t\t\t\t\t\tmodifier.activityModifierHash\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn modInfo;\r\n\t\t\t\t})\r\n\t\t\t\t.filter(mod => {\r\n\t\t\t\t\treturn mod !== undefined && mod.displayProperties.name !== \"\";\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst rotation = this.state.apiResponse.raidRotation.map(raid => {\r\n\t\t\tconst raidData = getActivityDef(featuredRaid.activityHash);\r\n\t\t\treturn raidData;\r\n\t\t});\r\n\r\n\t\tconst challenges = raidInfo.modifiers\r\n\t\t\t.map(modifier => {\r\n\t\t\t\tconst modifierInfo = getActivityModifierDef(\r\n\t\t\t\t\tmodifier.activityModifierHash\r\n\t\t\t\t);\r\n\t\t\t\treturn modifierInfo;\r\n\t\t\t})\r\n\t\t\t.filter(mod => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\tmod !== undefined && \r\n                    mod.displayProperties.name !== \"Contest Mode\" &&\r\n\t\t\t\t\tmod.displayProperties.name !== \"\"\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\treturn {\r\n\t\t\trotatorInfo: raidInfo,\r\n\t\t\tmasterInfo,\r\n\t\t\trotation,\r\n\t\t\tchallenges,\r\n\t\t\tmasterModifiers,\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state !== null && this.state.apiResponse.featuredRaid.activityHash !== -1) {\r\n\t\t\tconst raidInfo = this.getRaidInfo();\r\n\t\t\tif (raidInfo == undefined)\r\n\t\t\t\treturn <div>error loading raid rotation </div>;\r\n\t\t\treturn <div>{raidInfo.rotatorInfo.displayProperties.name}</div>;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default RaidDungeonCard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}