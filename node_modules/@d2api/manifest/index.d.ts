import { AllManifest, defLanguages, allTableNames } from "./generated-data.js";
import { DestinyManifestLanguage } from "bungie-api-ts/destiny2";
export * from "./generated-funcs.js";
export { emptyTables, defLanguages } from "./generated-data.js";
export type ManifestLanguage = (typeof defLanguages)[number];
export declare let isVerbose: boolean;
/**
 * run this if you love console logs
 */
export declare function verbose(): void;
/**
 * it may work without, but you should add an api key,
 * especially if you are in a browser and need proper CORS headers
 */
export declare function setApiKey(apiKey?: string): void;
/**
 * stores the language we'll try to fetch from API or cache
 */
export declare let language: ManifestLanguage;
/**
 * sets the language of the manifest to download.
 * note this doesn't re-trigger a download. you'll need to load() again.
 */
export declare function setLanguage(lang: ManifestLanguage): void;
/**
 * add tables which should be downloaded and available for lookups.
 * if unset, we download all tables except for excludeTables.
 *
 * use only this or excludeTables, not both.
 */
export declare function includeTables(tables: TableName[]): void;
/**
 * if set, all available tables will be downloaded and available
 * for lookups, except those specified here.
 *
 * this completely overrides includeTables.
 * use only this or includeTables, not both.
 */
export declare function excludeTables(tables: TableName[]): void;
type TableName = (typeof allTableNames)[number];
/**
 * you could access this directly,
 * if you're no fun and don't like my convenience get() and getAll() functions
 *
 * it's the big old object with all manifest data in it
 */
export declare let allManifest: AllManifest | undefined;
export declare function setManifest(manifest: AllManifest): void;
/**
 * the manifest version currently loaded in memory.
 * the version that you'll get information from if you `getDef()` an entry.
 *
 * this is in the form of `${manifestMetadata.version}__${language}`
 * (or the string "nothing loaded yet")
 */
export declare let loadedVersion: string;
/**
 * don't use this directly.
 * `@d2api/manifest-node` and `@d2api/manifest-web` use this function.
 * why are you even in here. go use those.
 *
 * `loadDefs()` from the web or node version should automatically
 * deal with making sure we tried to get a cached version first,
 * loadedVersion is correct, etc.
 */
export declare function loadManifestFromApiWithoutCheckingCache(cacheGetter?: (params: {
    version: string;
    tableName: TableName;
    language: DestinyManifestLanguage;
}) => AllManifest[TableName] | undefined | Promise<AllManifest[TableName] | undefined>, forceUpdate?: boolean): Promise<void>;
type DefsFrom<K extends TableName> = NonNullable<NonNullable<AllManifest>[K]>;
type DefFrom<K extends TableName> = DefsFrom<K>[number];
/**
 * performs a lookup of a known hash
 */
export declare function getDef<K extends TableName>(componentName: K, hash: number | string | undefined): DefFrom<K> | undefined;
/**
 * returns an array of all the values in a manifest component,
 * such as DestinyActivityDefinition
 */
export declare function getAllDefs<K extends TableName>(componentName: K): NonNullable<AllManifest[K]>[number][];
/** returns a manifest component (a set of definitions keyed by hash number) */
export declare function getComponent<K extends TableName>(componentName: K): NonNullable<AllManifest[K]>;
export declare function vlog(str: string): void;
/**
 * compares between `.` or `-` separated manifest version numbers
 *
 * feed this into a sort() to get highest version first
 */
export declare function compareVersionNumbers(a: string, b: string): number;
export declare function getNeededTables(): readonly ["Activity", "ActivityGraph", "ActivityMode", "ActivityModifier", "ActivityType", "Artifact", "BreakerType", "Checklist", "Class", "Collectible", "DamageType", "Destination", "EnergyType", "EquipmentSlot", "EventCard", "Faction", "Gender", "GuardianRankConstants", "GuardianRank", "InventoryBucket", "InventoryItem", "InventoryItemLite", "ItemCategory", "ItemTierType", "LoadoutColor", "LoadoutConstants", "LoadoutIcon", "LoadoutName", "Location", "Lore", "MaterialRequirementSet", "MedalTier", "Metric", "Milestone", "Objective", "Place", "PlugSet", "PowerCap", "PresentationNode", "Progression", "ProgressionLevelRequirement", "ProgressionMapping", "Race", "Record", "ReportReasonCategory", "RewardSource", "SandboxPattern", "SandboxPerk", "Season", "SeasonPass", "SocialCommendation", "SocialCommendationNode", "SocketCategory", "SocketType", "Stat", "StatGroup", "TalentGrid", "Trait", "Unlock", "UnlockValue", "Vendor", "VendorGroup"] | ("Activity" | "ActivityGraph" | "ActivityMode" | "ActivityModifier" | "ActivityType" | "Artifact" | "BreakerType" | "Checklist" | "Class" | "Collectible" | "DamageType" | "Destination" | "EnergyType" | "EquipmentSlot" | "EventCard" | "Faction" | "Gender" | "GuardianRankConstants" | "GuardianRank" | "InventoryBucket" | "InventoryItem" | "InventoryItemLite" | "ItemCategory" | "ItemTierType" | "LoadoutColor" | "LoadoutConstants" | "LoadoutIcon" | "LoadoutName" | "Location" | "Lore" | "MaterialRequirementSet" | "MedalTier" | "Metric" | "Milestone" | "Objective" | "Place" | "PlugSet" | "PowerCap" | "PresentationNode" | "Progression" | "ProgressionLevelRequirement" | "ProgressionMapping" | "Race" | "Record" | "ReportReasonCategory" | "RewardSource" | "SandboxPattern" | "SandboxPerk" | "Season" | "SeasonPass" | "SocialCommendation" | "SocialCommendationNode" | "SocketCategory" | "SocketType" | "Stat" | "StatGroup" | "TalentGrid" | "Trait" | "Unlock" | "UnlockValue" | "Vendor" | "VendorGroup")[];
