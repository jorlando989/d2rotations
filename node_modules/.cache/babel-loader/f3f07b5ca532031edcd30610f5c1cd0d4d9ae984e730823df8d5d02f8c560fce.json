{"ast":null,"code":"import { allManifest, compareVersionNumbers, loadedVersion, loadManifestFromApiWithoutCheckingCache, vlog, isVerbose } from '@d2api/manifest';\nexport { getDef, getAllDefs, setApiKey, setLanguage, allManifest, includeTables, excludeTables, verbose, defLanguages } from '@d2api/manifest';\nexport * from '@d2api/manifest/generated-funcs.js';\nimport { createStore, get as idbGet, keys as idbKeys, set as idbSet, del as idbDel } from 'idb-keyval';\nconst manifestStore = createStore('manifestDb', 'manifestStore');\n/**\r\n * check keys in indexeddb, find the highest numbered one\r\n */\nexport async function getLatestCachedVersion(lang) {\n  var _a;\n  const sep = `__${lang}__`;\n  const keysInCache = await idbKeys(manifestStore);\n  const manifestsByVersion = keysInCache.filter(p => p.includes(sep)).sort(compareVersionNumbers);\n  return ((_a = manifestsByVersion[0]) === null || _a === void 0 ? void 0 : _a.split(sep)[0]) || '';\n}\n/**\r\n * loads the newest manifest according to what version the API advertises\r\n *\r\n * if the newest version is already cached locally, uses that. otherwise\r\n * downloads the manifest file from the internet\r\n */\nexport async function loadDefs() {\n  isVerbose && console.time('manifest loaded');\n  await loadManifestFromApiWithoutCheckingCache(params => idbGet(`${params.version}__${params.language}__${params.tableName}`, manifestStore));\n  isVerbose && console.timeEnd('manifest loaded');\n  // save the results for next time\n  save();\n}\n/**\r\n * saves the loaded manifest to indexeddb file\r\n */\nasync function save() {\n  vlog(`saving manifest to indexeddb`);\n  if (!allManifest) {\n    console.error(`tried to save manifest but none was loaded in memory?`);\n    return;\n  }\n  for (const componentName in allManifest) {\n    await idbSet(`${loadedVersion}__${componentName}`, allManifest[componentName], manifestStore);\n  }\n  setTimeout(async () => {\n    const keysInCache = await idbKeys(manifestStore);\n    let delCount = 0;\n    for (const key of keysInCache) {\n      if (key.startsWith(loadedVersion)) continue;\n      await idbDel(key, manifestStore);\n      delCount++;\n    }\n    delCount && vlog(`pruned ${delCount} old manifest tables`);\n  }, 2000);\n  return true;\n}","map":{"version":3,"names":["allManifest","compareVersionNumbers","loadedVersion","loadManifestFromApiWithoutCheckingCache","vlog","isVerbose","getDef","getAllDefs","setApiKey","setLanguage","includeTables","excludeTables","verbose","defLanguages","createStore","get","idbGet","keys","idbKeys","set","idbSet","del","idbDel","manifestStore","getLatestCachedVersion","lang","_a","sep","keysInCache","manifestsByVersion","filter","p","includes","sort","split","loadDefs","console","time","params","version","language","tableName","timeEnd","save","error","componentName","setTimeout","delCount","key","startsWith"],"sources":["C:/Users/jorla/Documents/d2rotations/my-app/node_modules/@d2api/manifest-web/index.js"],"sourcesContent":["import { allManifest, compareVersionNumbers, loadedVersion, loadManifestFromApiWithoutCheckingCache, vlog, isVerbose, } from '@d2api/manifest';\r\nexport { getDef, getAllDefs, setApiKey, setLanguage, allManifest, includeTables, excludeTables, verbose, defLanguages, } from '@d2api/manifest';\r\nexport * from '@d2api/manifest/generated-funcs.js';\r\nimport { createStore, get as idbGet, keys as idbKeys, set as idbSet, del as idbDel } from 'idb-keyval';\r\nconst manifestStore = createStore('manifestDb', 'manifestStore');\r\n/**\r\n * check keys in indexeddb, find the highest numbered one\r\n */\r\nexport async function getLatestCachedVersion(lang) {\r\n    var _a;\r\n    const sep = `__${lang}__`;\r\n    const keysInCache = await idbKeys(manifestStore);\r\n    const manifestsByVersion = keysInCache.filter((p) => p.includes(sep)).sort(compareVersionNumbers);\r\n    return ((_a = manifestsByVersion[0]) === null || _a === void 0 ? void 0 : _a.split(sep)[0]) || '';\r\n}\r\n/**\r\n * loads the newest manifest according to what version the API advertises\r\n *\r\n * if the newest version is already cached locally, uses that. otherwise\r\n * downloads the manifest file from the internet\r\n */\r\nexport async function loadDefs() {\r\n    isVerbose && console.time('manifest loaded');\r\n    await loadManifestFromApiWithoutCheckingCache((params) => idbGet(`${params.version}__${params.language}__${params.tableName}`, manifestStore));\r\n    isVerbose && console.timeEnd('manifest loaded');\r\n    // save the results for next time\r\n    save();\r\n}\r\n/**\r\n * saves the loaded manifest to indexeddb file\r\n */\r\nasync function save() {\r\n    vlog(`saving manifest to indexeddb`);\r\n    if (!allManifest) {\r\n        console.error(`tried to save manifest but none was loaded in memory?`);\r\n        return;\r\n    }\r\n    for (const componentName in allManifest) {\r\n        await idbSet(`${loadedVersion}__${componentName}`, allManifest[componentName], manifestStore);\r\n    }\r\n    setTimeout(async () => {\r\n        const keysInCache = await idbKeys(manifestStore);\r\n        let delCount = 0;\r\n        for (const key of keysInCache) {\r\n            if (key.startsWith(loadedVersion))\r\n                continue;\r\n            await idbDel(key, manifestStore);\r\n            delCount++;\r\n        }\r\n        delCount && vlog(`pruned ${delCount} old manifest tables`);\r\n    }, 2000);\r\n    return true;\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,qBAAqB,EAAEC,aAAa,EAAEC,uCAAuC,EAAEC,IAAI,EAAEC,SAAS,QAAS,iBAAiB;AAC9I,SAASC,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,WAAW,EAAET,WAAW,EAAEU,aAAa,EAAEC,aAAa,EAAEC,OAAO,EAAEC,YAAY,QAAS,iBAAiB;AAC/I,cAAc,oCAAoC;AAClD,SAASC,WAAW,EAAEC,GAAG,IAAIC,MAAM,EAAEC,IAAI,IAAIC,OAAO,EAAEC,GAAG,IAAIC,MAAM,EAAEC,GAAG,IAAIC,MAAM,QAAQ,YAAY;AACtG,MAAMC,aAAa,GAAGT,WAAW,CAAC,YAAY,EAAE,eAAe,CAAC;AAChE;AACA;AACA;AACA,OAAO,eAAeU,sBAAsBA,CAACC,IAAI,EAAE;EAC/C,IAAIC,EAAE;EACN,MAAMC,GAAG,GAAI,KAAIF,IAAK,IAAG;EACzB,MAAMG,WAAW,GAAG,MAAMV,OAAO,CAACK,aAAa,CAAC;EAChD,MAAMM,kBAAkB,GAAGD,WAAW,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,QAAQ,CAACL,GAAG,CAAC,CAAC,CAACM,IAAI,CAAChC,qBAAqB,CAAC;EACjG,OAAO,CAAC,CAACyB,EAAE,GAAGG,kBAAkB,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACQ,KAAK,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeQ,QAAQA,CAAA,EAAG;EAC7B9B,SAAS,IAAI+B,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;EAC5C,MAAMlC,uCAAuC,CAAEmC,MAAM,IAAKtB,MAAM,CAAE,GAAEsB,MAAM,CAACC,OAAQ,KAAID,MAAM,CAACE,QAAS,KAAIF,MAAM,CAACG,SAAU,EAAC,EAAElB,aAAa,CAAC,CAAC;EAC9IlB,SAAS,IAAI+B,OAAO,CAACM,OAAO,CAAC,iBAAiB,CAAC;EAC/C;EACAC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA,eAAeA,IAAIA,CAAA,EAAG;EAClBvC,IAAI,CAAE,8BAA6B,CAAC;EACpC,IAAI,CAACJ,WAAW,EAAE;IACdoC,OAAO,CAACQ,KAAK,CAAE,uDAAsD,CAAC;IACtE;EACJ;EACA,KAAK,MAAMC,aAAa,IAAI7C,WAAW,EAAE;IACrC,MAAMoB,MAAM,CAAE,GAAElB,aAAc,KAAI2C,aAAc,EAAC,EAAE7C,WAAW,CAAC6C,aAAa,CAAC,EAAEtB,aAAa,CAAC;EACjG;EACAuB,UAAU,CAAC,YAAY;IACnB,MAAMlB,WAAW,GAAG,MAAMV,OAAO,CAACK,aAAa,CAAC;IAChD,IAAIwB,QAAQ,GAAG,CAAC;IAChB,KAAK,MAAMC,GAAG,IAAIpB,WAAW,EAAE;MAC3B,IAAIoB,GAAG,CAACC,UAAU,CAAC/C,aAAa,CAAC,EAC7B;MACJ,MAAMoB,MAAM,CAAC0B,GAAG,EAAEzB,aAAa,CAAC;MAChCwB,QAAQ,EAAE;IACd;IACAA,QAAQ,IAAI3C,IAAI,CAAE,UAAS2C,QAAS,sBAAqB,CAAC;EAC9D,CAAC,EAAE,IAAI,CAAC;EACR,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}